services:
  kong:
    image: kong:3.8
    volumes:
      - "./kong/config:/usr/local/kong/declarative"
      - "./logs/file.log:/file.log"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_LOG_LEVEL=debug
      - KONG_PLUGINS=bundled
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:7990:8001/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
  
  mongodb:
    image: mongo:7.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    command: >
      bash -c "
      mongod --replSet rs0 --bind_ip_all &
      until mongosh --quiet --eval 'db.runCommand({ ping: 1 })' > /dev/null 2>&1; do
        echo '⏳ Waiting for MongoDB to be ready...';
        sleep 1;
      done;
      echo '✅ MongoDB is ready, initializing replica set (if needed)...';
      mongosh --quiet --eval '
        try {
          rs.initiate({_id: \"rs0\", members: [{ _id: 0, host: \"mongo:27017\" }]})
        } catch(e) {
          print(\"Replica set may already be initialized:\", e)
        }
      ';
      wait
      "
    volumes:
      - mongo-data:/data/db
  
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - CLUSTER_ID=q1Sh-9_ISia_zwGINzRvyQ
    volumes:
      - kafka-data:/var/lib/kafka/data

  connect:
    image: debezium/connect:2.6
    container_name: connect
    ports:
      - "8083:8083"
    environment:
    - BOOTSTRAP_SERVERS=kafka:9092
    - GROUP_ID=1
    - CONFIG_STORAGE_TOPIC=connect-configs
    - OFFSET_STORAGE_TOPIC=connect-offsets
    - STATUS_STORAGE_TOPIC=connect-status
    - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1

    - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
    - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
    - KEY_CONVERTER_SCHEMAS_ENABLE=false
    - VALUE_CONVERTER_SCHEMAS_ENABLE=false
    depends_on:
      - kafka
      - mongodb
    volumes:
      - connect-data:/kafka/connect

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka        

  order-ms:
    build: ./order-service/
    container_name: order-ms
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 10s
      timeout: 3s       
      retries: 5          
      start_period: 5s
    depends_on:
      - kafka
      - mongodb

  inventory-ms:
    build: ./inventory-service/
    container_name: inventory-ms
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 10s
      timeout: 3s       
      retries: 5          
      start_period: 5s
    depends_on:
      - kafka
      - mongodb

  payment-ms:
    build: ./payment-service/
    container_name: payment-ms
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 10s
      timeout: 3s       
      retries: 5          
      start_period: 5s
    depends_on:
      - kafka
      - mongodb      

  order-consumer:
    build: ./order-service/
    container_name: order-consumer
    command: >
      sh -c "echo 'Waiting for Kafka...' && sleep 60 && python consumer/consumer.py"
    depends_on:
      - kafka
      - mongodb
      - order-ms
      - inventory-ms
      - payment-ms

  inventory-consumer:
    build: ./inventory-service/
    command: >
      sh -c "echo 'Waiting for Kafka...' && sleep 60 && python consumer/consumer.py"
    container_name: inventory-consumer
    depends_on:
      - kafka
      - mongodb
      - order-ms
      - inventory-ms
      - payment-ms

  payment-consumer:
    build: ./payment-service/
    command: >
      sh -c "echo 'Waiting for Kafka...' && sleep 60 && python consumer/consumer.py"
    container_name: payment-consumer
    depends_on:
      - kafka
      - mongodb   
      - order-ms
      - inventory-ms
      - payment-ms   


volumes:
  mongo-data:
  kafka-data:
  connect-data:
